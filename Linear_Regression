{
    "metadata": {
        "kernelspec": {
            "name": "python3",
            "display_name": "Python 3 (ipykernel)",
            "language": "python"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4,
    "cells": [
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Linear Regression\n",
                "This notebook demonstrates how to perform Linear Regression on the given dataset."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 101,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Library Imports\n",
                "import pandas as pd\n",
                "import numpy as np\n",
                "import sklearn\n",
                "import matplotlib.pyplot as pyplot\n",
                "import pickle\n",
                "from sklearn import linear_model\n",
                "from sklearn.utils import shuffle\n",
                "from matplotlib import style\n",
                "from sklearn.preprocessing import LabelEncoder"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Load the Data\n",
                "Load the data from the provided variables."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 102,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "   X  Y month  day  FFMC   DMC     DC  ISI  temp  RH  wind  rain  area\n0  7  5   mar  fri  86.2  26.2   94.3  5.1   8.2  51   6.7   0.0   0.0\n1  7  4   oct  tue  90.6  35.4  669.1  6.7  18.0  33   0.9   0.0   0.0\n2  7  4   oct  sat  90.6  43.7  686.9  6.7  14.6  33   1.3   0.0   0.0\n3  8  6   mar  fri  91.7  33.3   77.5  9.0   8.3  97   4.0   0.2   0.0\n4  8  6   mar  sun  89.3  51.3  102.2  9.6  11.4  99   1.8   0.0   0.0\n"
                }
            ],
            "source": [
                "# Assuming data is stored in a CSV file\n",
                "data = pd.read_csv(\"forestfires.csv\", sep=\",\")\n",
                "print(data.head())"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Preprocessing\n",
                "Handle any necessary data preprocessing steps."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 103,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Select features (X) and target variable (y)\n",
                "# \n",
                "# y = data['area']\n",
                "label_encoder = LabelEncoder()\n",
                "data[\"month\"] = label_encoder.fit_transform(data[\"month\"])\n",
                "\n",
                "data = data[[\"temp\", \"wind\", \"rain\", \"area\", \"ISI\", \"FFMC\", \"DMC\", \"DC\"]]\n",
                "predict = \"DC\"\n",
                "\n",
                "x = np.array(data.drop(predict, axis=1))\n",
                "y = np.array(data[predict])\n",
                "\n",
                ""
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Split the Data\n",
                "Split the data into training and testing sets."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 104,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Split data into train and test sets\n",
                "x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(x, y, test_size=0.2)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 105,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Accuracy:0.5279303716782209\n"
                }
            ],
            "source": [
                " linear = linear_model.LinearRegression()\n",
                "\n",
                "# # Define the line of best fit\n",
                " linear.fit(x_train, y_train)\n",
                "\n",
                " acc = linear.score(x_test, y_test)\n",
                " \n",
                " print(f\"Accuracy:{acc}\")"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 106,
            "metadata": {},
            "outputs": [],
            "source": [
                "#pickle it, save it\n",
                "with open(\"studentmodel.pickle\", \"wb\") as f:\n",
                "    pickle.dump(linear, f)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 107,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Load the pickle file\n",
                "pickle_in = open(\"studentmodel.pickle\", \"rb\")\n",
                "linear = pickle.load(pickle_in)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 108,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Coefficient: \n [  8.74084464 -15.17566612 -10.52227035  -0.05096494  -2.77704339\n   2.05637283   2.1457098 ]\nIntercept: \n 46.20439899290528\n"
                }
            ],
            "source": [
                "print('Coefficient: \\n', linear.coef_)\n",
                "print('Intercept: \\n', linear.intercept_)"
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Make Predictions\n",
                "Use the trained model to make predictions on the test set."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 109,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "588.0614331520551 [ 23.    4.5   0.    0.   12.2  92.4 117.9] 668.0\n551.4921159810276 [ 20.4   4.9   0.    0.    9.6  92.1 111.2] 654.1\n544.1129329917443 [22.8  4.   0.   0.   7.1 92.5 88. ] 698.6\n551.4921159810276 [ 20.4   4.9   0.    0.    9.6  92.1 111.2] 654.1\n618.2440461074905 [ 24.3   1.8   0.    0.    9.   91.6 104.2] 474.9\n714.3898087173277 [ 27.7   2.2   0.    0.    9.2  92.9 137. ] 706.4\n351.25200480938275 [11.5   4.    0.    8.24  5.5  90.7  44.  ] 92.4\n567.9160608313025 [21.4  3.1  0.   0.   6.3 90.2 99.6] 631.2\n786.9827224786711 [ 23.9   6.7   0.    0.   13.9  94.8 222.4] 698.6\n265.7217376174372 [ 5.5  6.3  0.   0.   9.6 89.3 51.3] 102.2\n602.4318290659992 [ 23.4   2.7   0.    0.    5.8  91.1 103.2] 638.8\n579.8291320505696 [23.8  1.8  0.   0.   5.6 90.8 84.7] 376.6\n478.56376995206256 [20.1   4.9   0.   26.13 15.9  94.3  85.1 ] 692.3\n603.8720268317754 [ 20.1    5.4    0.     2.74  10.6   91.4  142.4 ] 601.4\n592.1960312541921 [ 16.8    3.1    0.     5.83   7.5   91.5  130.1 ] 807.1\n475.40906167601673 [17.7  3.6  0.   0.   7.8 91.7 75.6] 718.3\n845.0018284730593 [ 10.5   4.    0.    0.   10.1  89.7 284.9] 844.0\n578.8628611216816 [ 16.6    0.9    0.     2.29   9.6   92.1  111.2 ] 654.1\n854.190812481294 [ 16.6   2.7   0.    0.    6.3  91.6 248.4] 753.8\n548.2739304756301 [ 16.    1.8   0.    0.    9.9  92.4 105.8] 758.1\n385.3856830170334 [15.9  3.6  0.   0.   5.2 91.4 37.9] 673.8\n606.6320347315439 [ 23.4    4.5    0.     2.51  16.5   96.   127.1 ] 570.5\n328.0780212858998 [15.7  3.1  0.   0.   5.3 86.6 13.2] 43.0\n497.4429778654082 [17.1   3.6   0.    6.57  8.5  92.3  88.8 ] 440.9\n235.51637533047904 [ 8.2  6.7  0.   0.   5.1 86.2 26.2] 94.3\n518.4675465327223 [18.3   2.2   0.    4.88  6.2  90.1  82.9 ] 735.7\n399.59573175236545 [15.2   3.1   0.    0.52 11.6  88.2  55.2 ] 732.3\n634.9209025285811 [ 21.    2.2   0.    7.3   7.   90.9 126.5] 686.5\n331.40088953456944 [10.6  4.   0.   0.   6.2 90.1 39.7] 86.6\n471.00164343575904 [15.4   4.9   0.   39.35  8.4  91.2  94.3 ] 744.4\n373.39608836813795 [17.   6.7  0.   0.   0.8 63.5 70.8] 665.3\n410.07484923316406 [20.6  5.4  0.   0.   8.8 92.6 46.5] 691.8\n532.41096735231 [27.8  2.7  0.   0.   1.9 81.6 56.7] 665.6\n585.109064470161 [ 19.5   6.3   0.    0.   10.6  91.4 142.4] 601.4\n535.870596099471 [19.6  2.7  0.   0.   7.1 92.5 88. ] 698.6\n610.7463105542461 [ 24.1   6.3   0.    2.   17.7  95.1 141.3] 605.8\n849.8687149610425 [ 16.8   3.1   0.    0.    6.3  91.6 248.4] 753.8\n496.28954028357913 [19.1   5.4   0.    3.52  7.5  90.4  93.3 ] 298.1\n585.2572590936372 [ 19.3   2.2   0.    0.    6.2  91.6 108.4] 764.0\n354.2344330815437 [14.1  2.7  0.   0.   3.8 88.1 25.7] 67.6\n288.91519318028145 [10.1   1.8   0.   51.78  3.5  85.    9.  ] 56.9\n749.4649267574091 [ 23.9   2.2   0.    0.   16.8  96.2 175.5] 661.8\n433.5408174485157 [18.   0.9  0.   0.   6.7 90.6 35.4] 669.1\n457.2876063207295 [16.4  4.   0.  71.3 11.9 92.2 81.8] 480.8\n563.2693605340337 [ 15.9    4.5    0.     2.18   7.5   91.5  130.1 ] 807.1\n683.4333838881996 [ 23.7   3.1   0.    0.   14.3  92.1 152.6] 658.2\n475.80028254797975 [17.4  5.4  0.   0.   7.1 88.6 91.8] 709.9\n648.8491437425312 [ 18.2    5.4    0.     0.43   7.1   91.   166.9 ] 752.6\n433.4244581792102 [ 11.2   7.6   0.    3.3   8.9  91.6 112.4] 573.0\n388.220580311477 [11.2  7.6  0.   0.   7.1 88.6 91.8] 709.9\n733.3901653461526 [ 28.3   3.1   0.   64.1   8.1  93.5 149.3] 728.6\n339.96741674772306 [15.1  5.4  0.   0.   7.8 91.7 35.8] 80.8\n860.032851151987 [ 30.8   4.5   0.    0.   18.   95.2 217.7] 690.0\n811.7655283681661 [ 13.8   7.6   0.    0.    7.1  91.  276.3] 825.1\n467.60290090328124 [18.8  4.9  0.   0.   7.7 93.  75.3] 466.6\n314.827136045916 [14.7  2.7  0.   0.   2.7 84.1  7.3] 52.8\n747.5707171193756 [ 28.7   2.7   0.    0.   13.5  93.1 157.3] 666.7\n756.6388321827758 [ 24.6   4.    0.    3.2   7.6  91.6 181.3] 613.0\n744.2814117678727 [ 28.6    2.2    0.     1.61   8.1   93.4  145.4 ] 721.4\n391.24114842438075 [18.2  3.1  0.   0.   7.5 91.4 30.7] 74.3\n511.76196274824684 [24.6   1.8   0.    1.43  6.2  90.1  51.2 ] 424.1\n743.4072216668987 [ 23.7    1.8    0.     1.38  13.7   91.8  170.9 ] 692.3\n459.9917470090865 [15.4   6.3   0.    7.31  9.6  92.1  99.  ] 745.3\n565.9407174547421 [ 20.5    4.     0.     1.64   9.6   92.1  111.2 ] 654.1\n560.1827841311415 [ 17.3    4.     0.     3.94  10.2   92.5  122.  ] 789.7\n517.0826392969038 [ 13.9    6.3    0.    11.24   7.    91.   129.5 ] 692.6\n468.8124602256944 [22.6   3.6   0.   11.32  0.8  63.5  70.8 ] 665.3\n590.8231543638155 [ 21.4    3.1    0.     4.25   8.9   91.6  112.4 ] 573.0\n241.2095445391211 [ 5.1   4.9   0.    5.38  2.   84.6  26.4 ] 352.0\n239.49274212065433 [ 8.7  5.8  0.   0.   8.  90.9 18.9] 30.6\n626.9632165817047 [ 21.6   2.2   0.    0.    7.5  92.8 119. ] 783.5\n492.1676026363502 [23.3  3.1  0.   0.   1.5 79.5 60.6] 366.7\n637.6023537293045 [ 11.8    4.9    0.     9.71  16.3   90.5  196.8 ] 649.9\n617.3699616434478 [ 24.2   1.8   0.    0.    9.   91.6 104.2] 474.9\n553.2001694942994 [20.7   2.2   0.    0.75  9.6  92.2  91.6 ] 503.6\n293.33790160395813 [14.2  4.   0.   0.   2.9 84.7  8.2] 55.0\n485.1342028580447 [14.3   4.    0.    1.94  4.7  88.2  96.2 ] 229.0\n561.0803311887557 [ 21.6   6.7   0.    0.    7.   91.  121.2] 561.6\n563.5329877490788 [ 14.4    5.4    0.     5.23   9.    88.8  147.3 ] 614.5\n359.4187228438389 [16.7  3.1  0.   0.   2.3 83.  23.3] 85.3\n746.7073267431222 [ 26.3    3.1    0.     7.02   8.9   92.7  164.1 ] 575.8\n322.0150159967095 [12.4   2.2   0.    6.38  3.9  86.8  15.6 ] 48.3\n818.6530463652571 [ 17.7   4.    0.    0.    7.5  91.5 238.2] 730.6\n301.14993046324093 [13.4  1.8  0.   0.   3.5 81.9  3. ] 7.9\n280.50246374563034 [13.8  5.8  0.   0.   9.9 93.4 17.3] 28.3\n685.2819922334013 [ 25.6   4.    0.    0.   11.3  94.4 146. ] 614.7\n667.736080207136 [ 20.8   1.3   0.    0.    9.2  92.9 137. ] 706.4\n358.927940883654 [10.6  2.7  0.   0.   0.4 53.4 71. ] 233.8\n241.9164011837548 [ 5.3  1.8  0.   0.   2.2 84.1  4.6] 46.7\n802.1048984577285 [ 18.9    4.9    0.     3.32   8.4   93.7  231.1 ] 715.1\n431.79105932240304 [18.    2.7   0.    0.36  3.9  85.8  48.3 ] 313.4\n560.6548595434913 [ 15.7   2.2   0.    0.    6.5  91.9 111.7] 770.3\n645.4367324361745 [ 20.6   1.8   0.    0.    7.5  91.5 130.1] 807.1\n721.1629533163061 [ 21.7    0.4    0.     2.47  13.5   93.1  157.3 ] 666.7\n479.82107498404616 [20.1   4.9   0.    1.46 15.9  94.3  85.1 ] 692.3\n281.2982589379609 [ 9.3  4.5  0.   0.   5.1 86.3 27.4] 97.1\n601.3894173710471 [ 19.8   5.4   0.    0.   10.6  91.4 142.4] 601.4\n674.4304313881703 [ 27.4   4.    0.    0.9  10.4  95.2 131.7] 578.8\n198.81957031147962 [ 7.5   6.3   0.    9.96  4.1  84.7   9.5 ] 58.3\n890.7762135539472 [ 25.9   3.1   0.    0.    8.4  93.7 231.1] 715.1\n648.0323895725198 [ 21.7    2.2    0.     0.43   7.    91.   129.5 ] 692.6\n454.8230427195759 [10.1   3.6   0.    3.71  9.6  92.1  99.  ] 745.3\n710.9792175705938 [ 26.8    6.3    0.     0.76  13.8   91.8  175.1 ] 700.7\n516.023324155386 [ 14.7   2.7   0.    0.   12.5  90.1 108. ] 529.8\n"
                }
            ],
            "source": [
                "predictions = linear.predict(x_test)\n",
                "\n",
                "for x in range(len(predictions)):\n",
                "    print(predictions[x], x_test[x], y_test[x]) "
            ]
        },
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# plot the data"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 110,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "",
                        "text/plain": "\u003cFigure size 640x480 with 1 Axes\u003e"
                    },
                    "metadata": {},
                    "output_type": "display_data"
                }
            ],
            "source": [
                "style.use(\"ggplot\")\n",
                "\n",
                "# Set up a scatter plot\n",
                "p = \"DC\"\n",
                "pyplot.scatter(data[p], data[\"area\"])\n",
                "pyplot.xlabel(p)\n",
                "pyplot.ylabel(\"area\")\n",
                "pyplot.show()"
            ]
        }
    ]
}
